---
title: ""
subtitle: ""
author: ""
date: ""
execute:
  echo: false
format:
  revealjs: 
    theme: dark
    embed-resources: true
    self-contained-math: true
    width: 1920
    height: 1080
    auto-play-media: true
css: styles.css
highlight-style: github
---

##

##

<center>
<video data-autoplay width="1200" src="../videos/nn_animation.mp4" style="margin-top: -300px;">
</video>
</center>

## {transition="fade" transition-speed="slow"}

<center>
<video data-autoplay src="../../media/videos/equation_morph/1080p60/equation_morph.mp4">
</video>
</center>

## {transition="fade" transition-speed="slow"}

$$\class{green}{x_{1}}w_1 + x_{2}w_2 + b_1 = h_1^*$$

<center>
<div class="svg-container">
  <img src="../svg/x1.svg" class="svg-image show">
</div>
</center>

## {transition="fade" transition-speed="slow"}

$$\class{green}{x_{1}w_1} + x_{2}w_2 + b_1 = h_1^*$$

<center>
<div class="svg-container">
  <img src="../svg/x1w.svg" class="svg-image show">
</div>
</center>

## {transition="fade" transition-speed="slow"}

$$\class{green}{x_{1}w_1 + x_{2}w_2} + b_1 = h_1^*$$

<center>
<div class="svg-container">
  <img src="../svg/x12w.svg" class="svg-image show">
</div>
</center>

## {transition="fade" transition-speed="slow"}

$$\class{green}{x_{1}w_1 + x_{2}w_2 + b_1 = h_1^*}$$

<center>
<div class="svg-container">
  <img src="../svg/x12wb.svg" class="svg-image show">
</div>
</center>

## {transition="fade" transition-speed="slow"}

$$x_{1}w_1 + x_{2}w_2 + b_1 = h_1^*$$

$$x_{1}\class{green}{w_3} + x_{2}\class{green}{w_4} + \class{green}{b_2} = \class{green}{h_2^*}$$

<center>
<div class="svg-container">
  <img src="../svg/x12wbh2.svg" class="svg-image show" style="margin-top:1em">
</div>
</center>

## {transition="fade" transition-speed="slow"}

$$x_{1}w_1 + x_{2}w_2 + b_1 = h_1^*$$

<center>
  <img src="../images/211_nn.png" style="margin-top:-2em"/>
</center>

## {transition="fade" transition-speed="slow"}

$$\begin{bmatrix}x_{1}&x_{2}\end{bmatrix}\begin{bmatrix}w_{1}&w_{2}\end{bmatrix}^T + \begin{bmatrix}b_1\end{bmatrix} = [h_1^*]$$

<center>
  <img src="../images/211_nn.png" style="margin-top:-2em"/>
</center>

## {transition="fade" transition-speed="slow"}

$$\begin{bmatrix}x_{1}&x_{2}\end{bmatrix}\begin{bmatrix}w_{1}&w_{2}\end{bmatrix}^T + \begin{bmatrix}b_1\end{bmatrix} = [h_1^*]$$

$$x_{1}w_3 + x_{2}w_4 + b_2 = h_2^*$$

<center>
  <img src="../images/221_nn.png" style="margin-top:-2em"/>
</center>

## {transition="fade" transition-speed="slow"}

$$\begin{bmatrix}x_{1}&x_{2}\end{bmatrix}\begin{bmatrix}w_{1}&w_{2}\\w_{3}&w_{4}\\\end{bmatrix}^T + \begin{bmatrix}b_1&b_2\end{bmatrix} = \begin{bmatrix}h_1^*&h_2^*\end{bmatrix}$$

<center>
  <img src="../images/221_nn.png" style="margin-top:-1em"/>
</center>


## {auto-animate=True}

$$\begin{bmatrix}x_{11}&x_{12}\\x_{21}&x_{22}\end{bmatrix}\begin{bmatrix}w_{1}&w_{2}\\w_{3}&w_{4}\\\end{bmatrix}^T + \begin{bmatrix}b_1&b_2\\b_1&b_2\end{bmatrix} = \begin{bmatrix}h_{11}^*&h_{12}^*\\h_{21}^*&h_{22}^*\end{bmatrix}$$

<center>
<div class="svg-container">
  <img src="../svg/h.svg" class="svg-image show">
</div>
</center>

## {auto-animate=True}

$$\begin{bmatrix}x_{11}&x_{12}\\x_{21}&x_{22}\end{bmatrix}\begin{bmatrix}w_{1}&w_{2}\\w_{3}&w_{4}\\\end{bmatrix}^T + \begin{bmatrix}b_1&b_2\\b_1&b_2\end{bmatrix} = \begin{bmatrix}h_{11}^*&h_{12}^*\\h_{21}^*&h_{22}^*\end{bmatrix}$$

$$\vec{h} = \begin{bmatrix}\phi(h_{11}^*)&\phi(h_{12}^*)\\\phi(h_{21}^*)&\phi(h_{22}^*)\end{bmatrix} = \begin{bmatrix}h_{11}&h_{12}\\h_{21}&h_{22}\end{bmatrix}$$

<center>
<div class="svg-container">
  <img src="../svg/h.svg" class="svg-image show">
</div>
</center>

## {transition="fade" transition-speed="slow"}

$$\vec{x}\vec{W}^T + \vec{b} \xrightarrow{\phi} \vec{h}$$

<center>
<div class="svg-container">
  <img src="../svg/h.svg" class="svg-image show">
</div>
</center>

## {transition="fade" transition-speed="slow"}

$$\vec{h}\vec{V}^T + \vec{d} \xrightarrow{\phi} \mathbf{\vec{\hat{y}}}$$

<center>
<div class="svg-container">
  <img src="../svg/ywb_nodes.svg" class="svg-image show">
</div>
</center>

## {transition="fade" transition-speed="slow"}


<div class="equation-grid">
  
<!-- First equation -->
<div class="equation-box">

  $$\overset{\text{linear}}{\phi(x) = x}$$

</div>

<!-- Second equation -->
<div class="equation-box">

  $$\overset{\text{ReLU}}{\phi(x) =\begin{cases}0,&\text{if }x < 0\\x,&\text{otherwise}\end{cases}}$$

</div>

<!-- First image -->
<div>
  <img src="../images/activation_functions/linear.png" class="activation-img"/>
</div>

<!-- Second image -->
<div>
  <img src="../images/activation_functions/relu.png" class="activation-img"/>
</div>

</div>


## {transition="fade" transition-speed="slow"}


<div class="equation-grid">
  
<!-- First equation -->
<div class="equation-box">

  $$\overset{\text{sigmoid}}{\phi(x) =  \frac{1}{1 + e^{-x}}}$$

</div>

<!-- Second equation -->
<div class="equation-box">

  $$\overset{\text{tanh}}{\phi(x) =  \frac{e^{x} - e^{-x}}{e^{x} + e^{-x}}}$$

</div>

<!-- First image -->
<div>
  <img src="../images/activation_functions/sigmoid.png"/>
</div>

<!-- Second image -->
<div>
  <img src="../images/activation_functions/tanh.png"/>
</div>

</div>

## {auto-animate=true}


```python
import numpy as np

SAMPLE_SIZE = 10_000
np.random.seed(2025)  # Return same sample every time

x1 = np.random.uniform(-5, 5, SAMPLE_SIZE)
x2 = np.random.uniform(-5, 5, SAMPLE_SIZE)
X = np.matrix([x1, x2]).T.reshape((-1, 2))

y = x1 * x2 + x1**2 + np.exp(np.sin(x2))
y.reshape((SAMPLE_SIZE, -1)) # Same dimension as NN output
```

## {auto-animate=true}


```{.python code-line-numbers="9-10"}
import numpy as np

SAMPLE_SIZE = 10_000
np.random.seed(2025)  # Return same sample every time

x1 = np.random.uniform(-5, 5, SAMPLE_SIZE)
x2 = np.random.uniform(-5, 5, SAMPLE_SIZE)
X = np.matrix([x1, x2]).T.reshape((SAMPLE_SIZE, FEATURES))

random_noise = np.random.normal(0, 1, SAMPLE_SIZE)
y = x1*x2 + x1**2 + np.exp(np.sin(x2)) + random_noise
y.reshape((SAMPLE_SIZE, -1)) # Same dimension as NN output
```


## {auto-animate=True}

```python
import numpy as np

SAMPLE_SIZE = 10_000
np.random.seed(2025)  # Return same sample every time

x1 = np.random.uniform(-5, 5, SAMPLE_SIZE)
x2 = np.random.uniform(-5, 5, SAMPLE_SIZE)
X = np.matrix([x1, x2]).T.reshape((SAMPLE_SIZE, FEATURES))

random_noise = np.random.normal(0, 1, SAMPLE_SIZE)
y = x1*x2 + x1**2 + np.exp(np.sin(x2)) + random_noise
y.reshape((SAMPLE_SIZE, -1)) # Same dimension as NN output

def sigmoid(x):
    return 1/(1 + np.exp(-x))
```

## {auto-animate=true}

```python
import numpy as np

SAMPLE_SIZE = 10_000
np.random.seed(2025)  # Return same sample every time

x1 = np.random.uniform(-5, 5, SAMPLE_SIZE)
x2 = np.random.uniform(-5, 5, SAMPLE_SIZE)
X = np.matrix([x1, x2]).T.reshape((SAMPLE_SIZE, FEATURES))

random_noise = np.random.normal(0, 1, SAMPLE_SIZE)
y = x1*x2 + x1**2 + np.exp(np.sin(x2)) + random_noise
y.reshape((SAMPLE_SIZE, -1)) # Same dimension as NN output

def sigmoid(x):
    return 1/(1 + np.exp(-x))

def feed_forward(x
```

<center>
<div class="svg-container">
  <img src="../svg/x.svg" class="svg-image show">
</div>
</center>

##

```python
import numpy as np

SAMPLE_SIZE = 10_000
np.random.seed(2025)  # Return same sample every time

x1 = np.random.uniform(-5, 5, SAMPLE_SIZE)
x2 = np.random.uniform(-5, 5, SAMPLE_SIZE)
X = np.matrix([x1, x2]).T.reshape((SAMPLE_SIZE, FEATURES))

random_noise = np.random.normal(0, 1, SAMPLE_SIZE)
y = x1*x2 + x1**2 + np.exp(np.sin(x2)) + random_noise
y.reshape((SAMPLE_SIZE, -1)) # Same dimension as NN output

def sigmoid(x):
    return 1/(1 + np.exp(-x))

def feed_forward(x, xh_weights, xh_biases
```

<center>
<div class="svg-container">
  <img src="../svg/x.svg" class="svg-image show" id="svg1">
  <img src="../svg/xwb.svg" class="svg-image" id="svg2">
</div>
</center>

<script>
function fadeSVGs(svgId1, svgId2) {
  document.getElementById(svgId1).classList.add('show');
  document.getElementById(svgId2).classList.remove('show');
  setTimeout(() => {
    document.getElementById(svgId1).classList.remove('show');
    document.getElementById(svgId2).classList.add('show');
  }, 500);
}

window.addEventListener('DOMContentLoaded', () => {
    window.Reveal.on('slidechanged', event => {
      fadeSVGs('svg1', 'svg2');
    });
});
</script>

## {auto-animate="true"}

```python
import numpy as np

SAMPLE_SIZE = 10_000
np.random.seed(2025)  # Return same sample every time

x1 = np.random.uniform(-5, 5, SAMPLE_SIZE)
x2 = np.random.uniform(-5, 5, SAMPLE_SIZE)
X = np.matrix([x1, x2]).T.reshape((SAMPLE_SIZE, FEATURES))

random_noise = np.random.normal(0, 1, SAMPLE_SIZE)
y = x1*x2 + x1**2 + np.exp(np.sin(x2)) + random_noise
y.reshape((SAMPLE_SIZE, -1)) # Same dimension as NN output

def sigmoid(x):
    return 1/(1 + np.exp(-x))

def feed_forward(x, xh_weights, xh_biases, hy_weights, hy_biases):
```

<center>
<div class="svg-container">
  <img src="../svg/xwb.svg" class="svg-image show" id="svg_yxwb">
  <img src="../svg/ywb.svg" class="svg-image" id="svg_ywb">
</div>
</center>

<script>
window.addEventListener('DOMContentLoaded', () => {
    window.Reveal.on('slidechanged', event => {
      fadeSVGs('svg_yxwb', 'svg_ywb');
    });
});
</script>

## {auto-animate="true"}

```python
def feed_forward(x, xh_weights, xh_biases, hy_weights, hy_biases):
```

<center>
<div class="svg-container">
  <img src="../svg/x.svg" class="svg-image show">
</div>
</center>

## {auto-animate="true"}

```python
def feed_forward(x, xh_weights, xh_biases, hy_weights, hy_biases):
    h_star = np.matmul(x, xh_weights) + xh_biases
    h = sigmoid(h_star)
```

<center>
<div class="svg-container">
  <img src="../svg/x.svg" class="svg-image show" id="svg_x">
  <img src="../svg/xwb.svg" class="svg-image" id="svg_xwb">
</div>
</center>

<script>
window.addEventListener('DOMContentLoaded', () => {
    window.Reveal.on('slidechanged', event => {
      fadeSVGs('svg_x', 'svg_xwb');
    });
});
</script>

## {auto-animate="true"}

```python
def feed_forward(x, xh_weights, xh_biases, hy_weights, hy_biases):
    h_star = np.matmul(x, xh_weights) + xh_biases
    h = sigmoid(h_star)

    y_star = np.matmul(h, hy_weights) + hy_biases
    y = sigmoid(y_star)

    return y
```

<center>
<div class="svg-container">
  <img src="../svg/xwb.svg" class="svg-image" id="svg_xwb">
  <img src="../svg/ywb.svg" class="svg-image show" id="svg_y">
</div>
</center>

<script>
window.addEventListener('DOMContentLoaded', () => {
    window.Reveal.on('slidechanged', event => {
      fadeSVGs('svg_xwb', 'svg_y');
    });
});
</script>

## {auto-animate="true"}

```python
def feed_forward(x, xh_weights, xh_biases, hy_weights, hy_biases):
    h_star = np.matmul(x, xh_weights) + xh_biases
    h = sigmoid(h_star)

    y_star = np.matmul(h, hy_weights) + hy_biases
    y = sigmoid(y_star)

    return y

FEATURES = 2
HIDDEN_LAYERS_SIZES = [2]
OUPUTS = 1

xh_weights = np.ones(shape=(HIDDEN_LAYERS_SIZES[0], FEATURES)).T
xh_biases = np.zeros(shape=(HIDDEN_LAYERS_SIZES[0]))

hy_weights = np.ones(shape=(OUPUTS, HIDDEN_LAYERS_SIZES[-1])).T
hy_biases = np.zeros(shape=(OUPUTS))
```

## {auto-animate="true"}

```python
xh_weights = np.ones(shape=(HIDDEN_LAYERS_SIZES[0], FEATURES)).T
xh_biases = np.zeros(shape=(HIDDEN_LAYERS_SIZES[0]))

hy_weights = np.ones(shape=(OUPUTS, HIDDEN_LAYERS_SIZES[-1])).T
hy_biases = np.zeros(shape=(OUPUTS))

y_hat = feed_forward(X, xh_weights, xh_biases, hy_weights, hy_biases)

# Loss function
def MSE(y, y_hat):
    return np.mean(np.array(y - y_hat)**2)

MSE(y, y_hat)
```

::: {.fragment .fade-in}

$$MSE(y, \hat{y}) = \frac{\sum_{i}^{n}(y_i - \hat{y}_i)^2}{n} = 2.44$$

:::

::: {.fragment .fade-in}

$$\hat{y} = \phi(y^*) \in (0, 1)$$

:::

::: {.fragment .fade-in}

$$y \in (0, 1) ?$$

:::

::: {.fragment .fade-in}

$$y = f(x_1, x_2) = x_1x_2 + x_1^2 + e^{\sin{(x_2)}}$$

:::

## {auto-animate="true"}

```python
# Loss function
def MSE(y, y_hat):
    return np.mean(np.array(y - y_hat)**2)

MSE(y, y_hat)

print(f"""
Mean: {np.mean(y):.3f}
Min: {np.min(y):.3f}
Max: {np.max(y):.3f}
""".strip())
```

::: {.fade-in}

\begin{align*}
\text{Mean}&: 2.218\\
\text{Min}&: 1.002\\
\text{Max}&: 4.262
\end{align*}

:::

## {auto-animate="true"}

```{.python code-line-numbers="9"}
def MSE(y, y_hat):
    return np.mean(np.array(y - y_hat)**2)

def feed_forward(x, xh_weights, xh_biases, hy_weights, hy_biases):
    h_star = np.matmul(x, xh_weights) + xh_biases
    h = sigmoid(h_star)

    y_star = np.matmul(h, hy_weights) + hy_biases
    y = sigmoid(y_star)

    return y

y_hat = feed_forward(X, xh_weights, xh_biases, hy_weights, hy_biases)
MSE(y, y_hat)
```

$$MSE(y, \hat{y}) = \frac{\sum_{i}^{n}(y_i - \hat{y}_i)^2}{n} = 2.44$$

## {auto-animate="true"}

```{.python code-line-numbers="9"}
def MSE(y, y_hat):
    return np.mean(np.array(y - y_hat)**2)

def feed_forward(x, xh_weights, xh_biases, hy_weights, hy_biases):
    h_star = np.matmul(x, xh_weights) + xh_biases
    h = sigmoid(h_star)

    y_star = np.matmul(h, hy_weights) + hy_biases
    y = y_star

    return y

y_hat = feed_forward(X, xh_weights, xh_biases, hy_weights, hy_biases)
MSE(y, y_hat)
```

$$MSE(y, \hat{y}) = \frac{\sum_{i}^{n}(y_i - \hat{y}_i)^2}{n} = 2.44$$

## {auto-animate="true"}

```python
def MSE(y, y_hat):
    return np.mean(np.array(y - y_hat)**2)

def feed_forward(x, xh_weights, xh_biases, hy_weights, hy_biases):
    h_star = np.matmul(x, xh_weights) + xh_biases
    h = sigmoid(h_star)

    y_star = np.matmul(h, hy_weights) + hy_biases
    y = y_star

    return y

y_hat = feed_forward(X, xh_weights, xh_biases, hy_weights, hy_biases)
MSE(y, y_hat)
```

$$MSE(y, \hat{y}) = \frac{\sum_{i}^{n}(y_i - \hat{y}_i)^2}{n} = 0.89$$

## {transition="fade" transition-speed="fast"}

$$f(x) = x$$
$$\frac{df}{dx}(x) = 1$$

<center>
  <img src="../images/linear_animation/0000.png" width="1200"/>
</center>

## {transition="fade" transition-speed="fast"}

$$f(x) = x$$
$$\frac{df}{dx}(x) = 1$$

<center>
<video data-autoplay width="1200" src="../videos/linear_derivative.mp4">
</video>
</center>

## {transition="fade" transition-speed="fast"}

$$f(x) = x^2$$
$$\frac{d f}{dx}(x) = 2x$$

<center>
  <img src="../images/square_animation/0000.png" width="1200"/>
</center>

## {transition="fade" transition-speed="fast"}

$$f(x) = x^2$$
$$\frac{df}{dx}(x) = 2x$$

<center>
<video data-autoplay width="1200" src="../videos/square_derivative.mp4">
</video>
</center>

##

$$MSE(y, \hat{y})$$

::: {.fragment .fade-in}

$$MSE(y, \vec{x}; \vec{\theta})$$

:::

::: {.fragment .fade-in}

$$\begin{pmatrix}\frac{\partial MSE}{\partial w_1}&\frac{\partial MSE}{\partial w_2}&\cdots\end{pmatrix}$$

:::

::: {.fragment .fade-in}

$$\Delta_{\vec{\theta}} MSE(y, \vec{x}; \vec{\theta})$$

:::

::: {.fragment .fade-in}

<center style="font-size: 2em; font-weight: bold;">
Gradient Descent
</center>

:::

## {transition="fade" transition-speed="fast"}

$$\text{Minimize } MSE(y, \hat{y})$$

::: {.fragment .fade-in}

$$\frac{\partial MSE}{\partial \theta{i}}(y, \hat{y_{\vec{\theta}}})$$

:::

## {transition="fade" transition-speed="fast"}

$$\{w_1,w_2,w_3,w_4,b_1,b_2\}$$

<center>
<div class="svg-container">
  <img src="../svg/xwb.svg" class="svg-image show">
</div>
</center>

## {transition="fade" transition-speed="fast"}

$$\{w_1,w_2,w_3,w_4,b_1,b_2\}$$

$$\{w_5, w_6, b_3\}$$

<center>
<div class="svg-container">
  <img src="../svg/ywb.svg" class="svg-image show">
</div>
</center>

## {transition="fade" transition-speed="fast"}

$$\frac{\partial L}{\partial w_{1}}(y, \hat{y_{\vec{\theta}}})$$

## {transition="fade" transition-speed="fast"}

$$\frac{\partial L}{\partial w_{1}} = \frac{\partial L}{\partial \hat{y}}\frac{\partial \hat{y}}{\partial w_{1}}$$

## {transition="fade" transition-speed="fast"}

$$\frac{\partial L}{\partial w_{1}} = \frac{\partial L}{\partial \hat{y}}\frac{\partial \hat{y}}{\partial y^*}\frac{\partial y^*}{\partial w_{1}}$$

## {transition="fade" transition-speed="fast"}

$$\frac{\partial L}{\partial w_{1}} = \frac{\partial L}{\partial \hat{y}}\frac{\partial \hat{y}}{\partial y^*}\frac{\partial y^*}{\partial h_{1}}\frac{\partial h_1}{\partial w_{1}}$$

## {auto-animate="true"}

$$\frac{\partial L}{\partial w_{1}} = \frac{\partial L}{\partial \hat{y}}\frac{\partial \hat{y}}{\partial y^*}\frac{\partial y^*}{\partial h_{1}}\frac{\partial h_1}{\partial h_1^*}\frac{\partial h_1^*}{\partial w_1}$$


::: {.fragment .fade-in}

$$L = (y - \hat{y})^2$$

$$\frac{\partial L}{\partial \hat{y}} = -2(y - \hat{y})$$

:::

## {auto-animate="true"}

$$\frac{\partial L}{\partial w_{1}} = \frac{\partial L}{\partial \hat{y}}\frac{\partial \hat{y}}{\partial y^*}\frac{\partial y^*}{\partial h_{1}}\frac{\partial h_1}{\partial h_1^*}\frac{\partial h_1^*}{\partial w_1}$$

$$\frac{\partial L}{\partial \hat{y}} = -2(y - \hat{y})$$

$$\frac{\partial \hat{y}}{\partial y^*} = 1$$

## {auto-animate="true"}

$$\frac{\partial L}{\partial w_{1}} = \frac{\partial L}{\partial \hat{y}}\frac{\partial \hat{y}}{\partial y^*}\frac{\partial y^*}{\partial h_{1}}\frac{\partial h_1}{\partial h_1^*}\frac{\partial h_1^*}{\partial w_1}$$

$$\frac{\partial L}{\partial \hat{y}} = -2(y - \hat{y})$$

$$\hat{y} = y^*$$

$$\frac{\partial \hat{y}}{\partial y^*} = 1$$

## {auto-animate="true"}

$$h_1 = (1 + e^{-h_1^*})^{-1}$$

$$\frac{\partial h_1}{\partial h_1^*} = -(1 + e^{-h_1^*})^{-2}e^{-h_1^*}(-1)$$

::: {.fragment .fade-in}

$$\frac{\partial h_1}{\partial h_1^*} = (1 + e^{-h_1^*})^{-2}e^{-h_1^*}$$

:::

::: {.fragment .fade-in}

$$\frac{\partial h_1}{\partial h_1^*} = h_1^2e^{-h_1^*}$$

:::

::: {.fragment .fade-in}

$$\frac{\partial h_1}{\partial h_1^*} = h_1^2(e^{-h_1^*} + 1 - 1)$$

:::

::: {.fragment .fade-in}

$$\frac{\partial h_1}{\partial h_1^*} = h_1^2(h_1^{-1} - 1)$$

:::

::: {.fragment .fade-in}

$$\frac{\partial h_1}{\partial h_1^*} = h_1(1 - h_1)$$

:::

## {auto-animate="true"}

$$\frac{\partial L}{\partial b_{3}} = \class{green}{\frac{\partial L}{\partial \hat{y}_{\vec{\theta}}}\frac{\partial \hat{y}_{\vec{\theta}}}{\partial y^*_{\vec{\theta}}}}\frac{\partial y^*_{\vec{\theta}}}{\partial b_{3}}$$

$$\frac{\partial L}{\partial w_6} = \class{green}{\frac{\partial L}{\partial \hat{y}_{\vec{\theta}}}\frac{\partial \hat{y}_{\vec{\theta}}}{y^*_{\vec{\theta}}}}\frac{\partial y^*_{\vec{\theta}}}{\partial w_{6}}$$

$$\frac{\partial L}{\partial w_5} = \class{green}{\frac{\partial L}{\partial \hat{y}_{\vec{\theta}}}\frac{\partial \hat{y}_{\vec{\theta}}}{\partial y^*_{\vec{\theta}}}}\frac{\partial y^*_{\vec{\theta}}}{\partial w_{5}}$$

$$\frac{\partial L}{\partial b_2} = \class{green}{\frac{\partial L}{\partial \hat{y}_{\vec{\theta}}}\frac{\partial \hat{y}_{\vec{\theta}}}{\partial y^*_{\vec{\theta}}}}\frac{\partial y^*_{\vec{\theta}}}{\partial h_{2}}\frac{\partial h_2}{\partial h_2^*}\frac{\partial h_2^*}{\partial b_2}$$


## {auto-animate="true"}

```python
def backpropagation(X, y, xh_weights, xh_biases, hy_weights, hy_biases, lr):
    # Inference
    h_star = np.array(np.matmul(X, xh_weights) + xh_biases)
    h = sigmoid(h_star)

    y_star = np.array(np.matmul(h, hy_weights) + hy_biases)
    y_hat = y_star

    # Derivatives
    dy_yhat = 2 / SAMPLE_SIZE * (y - y_hat)
    dystar_hstar = h * (1 - h)
    dystar_hstar = np.array(dystar_hstar * hy_weights.reshape(1, -1))
    dystar_hstar = dy_yhat * dystar_hstar

    # Update weights and biases
    hy_biases += lr * np.sum(dy_yhat, axis=0)
    hy_weights += lr * np.sum(dy_yhat * h, axis=0).reshape(-1, 1)

    xh_biases += lr * np.sum(dystar_hstar, axis=0)
    xh_weights += lr * np.matmul(X.T, dystar_hstar)

    return MSE(y, y_hat)
```

## {auto-animate="true"}

```python
def backpropagation(X, y, xh_weights, xh_biases, hy_weights, hy_biases, lr):
    # Inference
    h_star = np.array(np.matmul(X, xh_weights) + xh_biases)
    h = sigmoid(h_star)

    y_star = np.array(np.matmul(h, hy_weights) + hy_biases)
    y_hat = y_star

    # Derivatives
    dy_yhat = 2 / SAMPLE_SIZE * (y - y_hat)
    dystar_hstar = h * (1 - h)
    dystar_hstar = np.array(dystar_hstar * hy_weights.reshape(1, -1))
    dystar_hstar = dy_yhat * dystar_hstar

    # Update weights and biases
    hy_biases += lr * np.sum(dy_yhat, axis=0)
    hy_weights += lr * np.sum(dy_yhat * h, axis=0).reshape(-1, 1)

    xh_biases += lr * np.sum(dystar_hstar, axis=0)
    xh_weights += lr * np.matmul(X.T, dystar_hstar)

    return MSE(y, y_hat)


EPOCHS = 100
for i in range(EPOCHS):
    backpropagation(X, y, xh_weights, xh_biases, hy_weights, hy_biases, 0.01)
``` 

## {auto-animate="true"}

```python
random_noise = np.random.normal(0, 1, SAMPLE_SIZE)
y = x1**2 + np.exp(np.sin(x2)) + random_noise
```

$$y \sim  N\left(x_1^2 + e^{\sin(x_2)}, ~1\right)$$

$$\text{Minium } MSE \approx 1$$

## {auto-animate="true"}

<center>
  <img src="../images/training(2).png"/>
</center>

## {auto-animate="true"}

<center>
  <img src="../images/training.png"/>
</center>