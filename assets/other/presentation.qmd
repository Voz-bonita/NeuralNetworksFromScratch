---
title: ""
subtitle: ""
author: ""
date: ""
execute:
  echo: false
format:
  revealjs: 
    theme: dark
    embed-resources: true
    self-contained-math: true
    width: 1920
    height: 1080
css: styles.css
highlight-style: github
---

## {transition="convex" transition-speed="slow"}

$$f(x) = x$$

<center>
  <img src="../images/identity.png"/>
</center>

## {transition="convex" transition-speed="slow"}

$$f(x) = x^2$$

<center>
  <img src="../images/square.png"/>
</center>

## {transition="convex" transition-speed="slow"}

$$f(x_1, x_2) = x_1x_2 + x_1^2 + e^{\sin{(x_2)}}$$

<center>
  <img src="../images/complicated.png"/>
</center>

## {transition="fade" transition-speed="slow"}

$$\class{green}{x_{1}}w_1 + x_{2}w_2 + b_1 = h_1^*$$

<center>
<div class="svg-container">
  <img src="../svg/x1.svg" class="svg-image show">
</div>
</center>

## {transition="fade" transition-speed="slow"}

$$\class{green}{x_{1}w_1} + x_{2}w_2 + b_1 = h_1^*$$

<center>
<div class="svg-container">
  <img src="../svg/x1w.svg" class="svg-image show">
</div>
</center>

## {transition="fade" transition-speed="slow"}

$$\class{green}{x_{1}w_1 + x_{2}w_2} + b_1 = h_1^*$$

<center>
<div class="svg-container">
  <img src="../svg/x12w.svg" class="svg-image show">
</div>
</center>

## {transition="fade" transition-speed="slow"}

$$\class{green}{x_{1}w_1 + x_{2}w_2 + b_1 = h_1^*}$$

<center>
<div class="svg-container">
  <img src="../svg/x12wb.svg" class="svg-image show">
</div>
</center>

## {transition="fade" transition-speed="slow"}

$$x_{1}w_1 + x_{2}w_2 + b_1 = h_1^*$$

$$x_{1}\class{green}{w_3} + x_{2}\class{green}{w_4} + \class{green}{b_2} = \class{green}{h_2^*}$$

<center>
<div class="svg-container">
  <img src="../svg/x12wbh2.svg" class="svg-image show" style="margin-top:1em">
</div>
</center>

## {transition="fade" transition-speed="slow"}

$$x_{1}w_1 + x_{2}w_2 + b_1 = h_1^*$$

<center>
  <img src="../images/211_nn.png" style="margin-top:-2em"/>
</center>

## {transition="fade" transition-speed="slow"}

$$\begin{bmatrix}x_{1}&x_{2}\end{bmatrix}\begin{bmatrix}w_{1}&w_{2}\end{bmatrix}^T + \begin{bmatrix}b_1\end{bmatrix} = [h_1^*]$$

<center>
  <img src="../images/211_nn.png" style="margin-top:-2em"/>
</center>

## {transition="fade" transition-speed="slow"}

$$\begin{bmatrix}x_{1}&x_{2}\end{bmatrix}\begin{bmatrix}w_{1}&w_{2}\end{bmatrix}^T + \begin{bmatrix}b_1\end{bmatrix} = [h_1^*]$$

$$x_{1}w_3 + x_{2}w_4 + b_2 = h_2^*$$

<center>
  <img src="../images/221_nn.png" style="margin-top:-2em"/>
</center>

## {transition="fade" transition-speed="slow"}

$$\begin{bmatrix}x_{1}&x_{2}\end{bmatrix}\begin{bmatrix}w_{1}&w_{2}\\w_{3}&w_{4}\\\end{bmatrix}^T + \begin{bmatrix}b_1&b_2\end{bmatrix} = \begin{bmatrix}h_1^*&h_2^*\end{bmatrix}$$

<center>
  <img src="../images/221_nn.png" style="margin-top:-1em"/>
</center>


## {auto-animate=True}

$$\begin{bmatrix}x_{11}&x_{12}\\x_{21}&x_{22}\end{bmatrix}\begin{bmatrix}w_{1}&w_{2}\\w_{3}&w_{4}\\\end{bmatrix}^T + \begin{bmatrix}b_1&b_2\\b_1&b_2\end{bmatrix} = \begin{bmatrix}h_{11}^*&h_{12}^*\\h_{21}^*&h_{22}^*\end{bmatrix}$$

<center>
<div class="svg-container">
  <img src="../svg/h.svg" class="svg-image show">
</div>
</center>

## {auto-animate=True}

$$\begin{bmatrix}x_{11}&x_{12}\\x_{21}&x_{22}\end{bmatrix}\begin{bmatrix}w_{1}&w_{2}\\w_{3}&w_{4}\\\end{bmatrix}^T + \begin{bmatrix}b_1&b_2\\b_1&b_2\end{bmatrix} = \begin{bmatrix}h_{11}^*&h_{12}^*\\h_{21}^*&h_{22}^*\end{bmatrix}$$

$$\vec{h} = \begin{bmatrix}\phi(h_{11}^*)&\phi(h_{12}^*)\\\phi(h_{21}^*)&\phi(h_{22}^*)\end{bmatrix} = \begin{bmatrix}h_{11}&h_{12}\\h_{21}&h_{22}\end{bmatrix}$$

<center>
<div class="svg-container">
  <img src="../svg/h.svg" class="svg-image show">
</div>
</center>

## {transition="fade" transition-speed="slow"}

$$\vec{x}\vec{W}^T + \vec{b} \xrightarrow{\phi} \vec{h}$$

<center>
<div class="svg-container">
  <img src="../svg/h.svg" class="svg-image show">
</div>
</center>

## {transition="fade" transition-speed="slow"}

$$\vec{h}\vec{V}^T + \vec{d} \xrightarrow{\phi} \mathbf{\vec{\hat{y}}}$$

<center>
<div class="svg-container">
  <img src="../svg/ywb_nodes.svg" class="svg-image show">
</div>
</center>

## {transition="fade" transition-speed="slow"}


<div class="equation-grid">
  
<!-- First equation -->
<div class="equation-box">

  $$\overset{\text{linear}}{\phi(x) = x}$$

</div>

<!-- Second equation -->
<div class="equation-box">

  $$\overset{\text{ReLU}}{\phi(x) =\begin{cases}0,&\text{if }x < 0\\x,&\text{otherwise}\end{cases}}$$

</div>

<!-- First image -->
<div>
  <img src="../images/activation_functions/linear.png" class="activation-img"/>
</div>

<!-- Second image -->
<div>
  <img src="../images/activation_functions/relu.png" class="activation-img"/>
</div>

</div>


## {transition="fade" transition-speed="slow"}


<div class="equation-grid">
  
<!-- First equation -->
<div class="equation-box">

  $$\overset{\text{sigmoid}}{\phi(x) =  \frac{1}{1 + e^{-x}}}$$

</div>

<!-- Second equation -->
<div class="equation-box">

  $$\overset{\text{tanh}}{\phi(x) =  \frac{e^{x} - e^{-x}}{e^{x} + e^{-x}}}$$

</div>

<!-- First image -->
<div>
  <img src="../images/activation_functions/sigmoid.png"/>
</div>

<!-- Second image -->
<div>
  <img src="../images/activation_functions/tanh.png"/>
</div>

</div>

## {auto-animate=true}


```python
import numpy as np

SAMPLE_SIZE = 10_000
np.random.seed(2025)  # Return same sample every time

x1 = np.random.uniform(-5, 5, SAMPLE_SIZE)
x2 = np.random.uniform(-5, 5, SAMPLE_SIZE)

y = x1 * x2 + x1**2 + np.exp(np.sin(x2))
```

## {auto-animate=True}

```python
import numpy as np

SAMPLE_SIZE = 10_000
np.random.seed(2025)  # Return same sample every time

x1 = np.random.uniform(-5, 5, SAMPLE_SIZE)
x2 = np.random.uniform(-5, 5, SAMPLE_SIZE)

y = x1 * x2 + x1**2 + np.exp(np.sin(x2))

def sigmoid(x):
    return 1/(1 + np.exp(-x))
```

## {auto-animate=true}

```python
import numpy as np

SAMPLE_SIZE = 10_000
np.random.seed(2025)  # Return same sample every time

x1 = np.random.uniform(-5, 5, SAMPLE_SIZE)
x2 = np.random.uniform(-5, 5, SAMPLE_SIZE)

y = x1 * x2 + x1**2 + np.exp(np.sin(x2))

def sigmoid(x):
    return 1/(1 + np.exp(-x))

def feed_forward(x
```

<center>
<div class="svg-container">
  <img src="../svg/x.svg" class="svg-image show">
</div>
</center>

##

```python
import numpy as np

SAMPLE_SIZE = 10_000
np.random.seed(2025)  # Return same sample every time

x1 = np.random.uniform(-5, 5, SAMPLE_SIZE)
x2 = np.random.uniform(-5, 5, SAMPLE_SIZE)

y = x1 * x2 + x1**2 + np.exp(np.sin(x2))

def sigmoid(x):
    return 1/(1 + np.exp(-x))

def feed_forward(x, xh_weights, xh_biases
```

<center>
<div class="svg-container">
  <img src="../svg/x.svg" class="svg-image show" id="svg1">
  <img src="../svg/xwb.svg" class="svg-image" id="svg2">
</div>
</center>

<script>
function fadeSVGs(svgId1, svgId2) {
  document.getElementById(svgId1).classList.add('show');
  document.getElementById(svgId2).classList.remove('show');
  setTimeout(() => {
    document.getElementById(svgId1).classList.remove('show');
    document.getElementById(svgId2).classList.add('show');
  }, 500);
}

window.addEventListener('DOMContentLoaded', () => {
    window.Reveal.on('slidechanged', event => {
      fadeSVGs('svg1', 'svg2');
    });
});
</script>

## {auto-animate="true"}

```python
import numpy as np

SAMPLE_SIZE = 10_000
np.random.seed(2025)  # Return same sample every time

x1 = np.random.uniform(-5, 5, SAMPLE_SIZE)
x2 = np.random.uniform(-5, 5, SAMPLE_SIZE)

y = x1 * x2 + x1**2 + np.exp(np.sin(x2))

def sigmoid(x):
    return 1/(1 + np.exp(-x))

def feed_forward(x, xh_weights, xh_biases, hy_weights, hy_biases):
```

<center>
<div class="svg-container">
  <img src="../svg/xwb.svg" class="svg-image show" id="svg_yxwb">
  <img src="../svg/ywb.svg" class="svg-image" id="svg_ywb">
</div>
</center>

<script>
window.addEventListener('DOMContentLoaded', () => {
    window.Reveal.on('slidechanged', event => {
      fadeSVGs('svg_yxwb', 'svg_ywb');
    });
});
</script>

## {auto-animate="true"}

```python
def feed_forward(x, xh_weights, xh_biases, hy_weights, hy_biases):
```

<center>
<div class="svg-container">
  <img src="../svg/x.svg" class="svg-image show">
</div>
</center>

## {auto-animate="true"}

```python
def feed_forward(x, xh_weights, xh_biases, hy_weights, hy_biases):
    h_star = np.matmul(x, xh_weights) + xh_biases
    h = sigmoid(h_star)
```

<center>
<div class="svg-container">
  <img src="../svg/x.svg" class="svg-image show" id="svg_x">
  <img src="../svg/xwb.svg" class="svg-image" id="svg_xwb">
</div>
</center>

<script>
window.addEventListener('DOMContentLoaded', () => {
    window.Reveal.on('slidechanged', event => {
      fadeSVGs('svg_x', 'svg_xwb');
    });
});
</script>

## {auto-animate="true"}

```python
def feed_forward(x, xh_weights, xh_biases, hy_weights, hy_biases):
    h_star = np.matmul(x, xh_weights) + xh_biases
    h = sigmoid(h_star)

    y_star = np.matmul(h, hy_weights) + hy_biases
    y = sigmoid(y_star)

    return y
```

<center>
<div class="svg-container">
  <img src="../svg/xwb.svg" class="svg-image" id="svg_xwb">
  <img src="../svg/ywb.svg" class="svg-image show" id="svg_y">
</div>
</center>

<script>
window.addEventListener('DOMContentLoaded', () => {
    window.Reveal.on('slidechanged', event => {
      fadeSVGs('svg_xwb', 'svg_y');
    });
});
</script>